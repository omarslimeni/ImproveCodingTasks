#Write a Python program to import a built-in array module and display the namespace of the said module.

import array
for name in array.__dict__:
    print(name)

class Student:
    def __init__(self, student_id, student_name, class_name):
        self.student_id = student_id
        self.student_name = student_name
        self.class_name = class_name
student = Student('V12', 'Frank Gibson', 'V')
print(student.__dict__)

#{'student_id': 'V12', 'student_name': 'Frank Gibson', 'class_name': 'V'}

class Myclass:
    pass
# it means i create new data stucture new data type called Myclass

o1 = Myclass()
o2 = Myclass()
#it means i created two objects of a type Myclass

o1.x = 10
o1.y =[12,23,23]

# i can add new attributes to myclass

print(vars(o1))
# return dictionary of attributes and their values
#{'x': 10, 'y': [12, 23, 23]}


import builtins
help(builtins.abs)
print(builtins.abs(-155))

def student(student_id, student_name, student_class):
    return f'Student ID: {student_id}\nStudent Name: {student_name}\nClass: {student_class}'
print(student('S122', 'Wilson Medina', 'VI'))


def student_data(student_id, **kwargs):
    print(f'\nStudent ID: {student_id}')
    if 'student_name' in kwargs:
        print(f"Student Name: $ {kwargs['student_name']}")

    if 'student_name' and 'student_class' in kwargs:
        print(f"\nStudent Name: $ {kwargs['student_name']}")
        print(f"Student Class: $ {kwargs['student_class']}")


student_data(student_id='SV12', student_name='Jean Garner')

student_data(student_id='SV12', student_name='Jean Garner', student_class='V')

# Student ID: SV12
# Student Name: $ Jean Garner
#
# Student ID: SV12
# Student Name: $ Jean Garner
#
# Student Name: $ Jean Garner
# Student Class: $ V
class Student:
    pass
print(type(Student))
print(Student.__dict__.keys())
print(Student.__module__)

# <class 'type'>
# dict_keys(['__module__', '__dict__', '__weakref__', '__doc__'])
# __main__


class Student:
    pass
class Marks:
    pass
student1 = Student()
marks1 = Marks()
print(isinstance(student1, Student))
print(isinstance(marks1, Student))
print(isinstance(marks1, Marks))
print(isinstance(student1, Marks))
print("\nCheck whether the said classes are subclasses of the built-in object class or not.")
print(issubclass(Student, object))
print(issubclass(Marks, object))

# True
# False
# True
# False
#
# Check whether the said classes are subclasses of the built-in object class or not.
# True
# True

class Student:
    student_name = 'Terrance Morales'
    marks = 93
print(f"Student Name: {getattr(Student, 'student_name')}")
print(f"Marks: {getattr(Student, 'marks')}")
setattr(Student, 'student_name', 'Angel Brooks')
setattr(Student, 'marks', 95)
print(f"Student Name: {getattr(Student, 'student_name')}")
print(f"Marks: {getattr(Student, 'marks')}")

# Student Name: Terrance Morales
# Marks: 93
# Student Name: Angel Brooks
# Marks: 95


class Student:
    student_id = 'V10'
    student_name = 'Jacqueline Barnett'
print("Original attributes and their values of the Student class:")
for attr, value in Student.__dict__.items():
    if not attr.startswith('_'):
        print(f'{attr} -> {value}')
print("\nAfter adding the student_class, attributes and their values with the said class:")
Student.student_class  = 'V'
for attr, value in Student.__dict__.items():
    if not attr.startswith('_'):
        print(f'{attr} -> {value}')
print("\nAfter removing the student_name, attributes and their values from the said class:")
del Student.student_name
#delattr(Student, 'student_name')
for attr, value in Student.__dict__.items():
    if not attr.startswith('_'):
        print(f'{attr} -> {value}')

print("next task")
class Student:
    school = 'Forward Thinking'
    address = '2626/Z Overlook Drive, COLUMBUS'
student1 = Student()
student2 = Student()
student1.student_id = "V12"
student1.student_name = "Ernesto Mendez"
student2.student_id = "V12"
student2.marks_language = 85
student2.marks_science = 93
student2.marks_math = 95
students = [student1, student2]
for student in students:
    print('\n')
    for attr in student.__dict__:
        print(f'{attr} -> {getattr(student, attr)}')
        

# student_id -> V12
# student_name -> Ernesto Mendez
# 
# 
# student_id -> V12
# marks_language -> 85
# marks_science -> 93
# marks_math -> 95
